<?php

/**
 * @file
 * Enables drupal gears for nodes and views.
 */


/**
 * Implementation of hook_help().
 */
function gears_help($path, $arg) {
  switch ($path) {
    case 'admin/help#gears':
      $output = '<p>'. t('<a href="http://gears.google.com/">Google Gears</a> is an open source project that enables more powerful web applications,
                         by adding new features to web browsers') .'</p>';
      $output .= '<p>'. t('This gears.modulo integrates with drupal part of the functionalities of google gears
                   The LocalServer module allows a web application to cache and server its HTTP resources locally, without a network connection.<br />
                   The LocalServer module is a specialized URL cache that the web application controls.') .
                    t('Requests for URLs in the LocalServers cache are intercepted and served locally from the users disk.<br />
                   For the cache application we used the option ManagedResourceStore:
                   for capturing a related set of URLs that are declared in a manifest file, and are updated automatically.') .
                    t('The ManagedResourceStore allows the set of resources needed to run a web application to be captured.<br />
                   The module integrates with different types of content created. It also integrates with the views module.
                   Being able to cache a web application of a specific view.<br/><br/>') .
                    t('To work with google gears we have created a plugin jquery with different methods for the management of localserver.<br/>
                   <b>This module is a development version, Google gears is a beta version and that makes it may be unstable</b>
                   Feature: <br/> ') .
                    t('<ul>
                      <li>Block for managing google gears</li>
                      <li>It creates the cache of view or node</li>
                      <li>Clears the store created by google gears of view or node</li>
                      <li>Report of state online / offline</li>
                      <li>TODO: It creates an icon on the desktop to access the application</li>
                    </ul>
   ') .'</p>';
  return $output;
  }
}

function gears_admin_settings() {
  $form['gears_box'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gears box'),
    '#collapsible' => 1,
    '#description' => t('You can customize box warning Segurity Google Gears')
  );
  $form['gears_box']['gears_box_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
//    '#description' => t('El tÃ­tulo de la caja'),
    '#default_value' => drupal_strlen($edit['gears_box_title']) ? $edit['gears_box_title'] : variable_get('gears_box_title', t('Drupal Gears')),
  );
  $form['gears_box']['gears_box_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => drupal_strlen($edit['gears_box_description']) ? $edit['gears_box_description'] : variable_get('gears_box_description', t('If you accept you can use Gears, and let you continue working offline')),
  );

  $form['gears_node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Existing nodes'),
    '#collapsible' => 1,
    '#collapsed' => TRUE,
    '#description' => t('Select types of content to want to use gears. Only those nodes will be displayed the block Gears.'),
  );
  $types = node_get_types('names');
  foreach ($types as $type => $name) {
    $form['gears_node']['gears_node_'. $type] = array(
      '#type' => 'checkbox',
      '#title' => t('@s', array('@s' => $name)),
      '#default_value' => variable_get('gears_node_'. $type, FALSE),
    );
  }

  if (module_exists('views')) {
    $form['gears_views_existing'] = array(
      '#type' => 'fieldset',
      '#title' => t('Existing views'),
      '#collapsible' => 1,
      '#collapsed' => TRUE,
      '#description' => t('Select views to want to use gears. Only those views will be displayed the block Gears.<br />
         <ul>
           <li>Views with <b>arguments</b>: NO. For now, do not have the functionality of google gears, so do not appear on the list below.</li>
           <li>Views with <b>filters</b>: NO</li>
           <li>Views with <b>exposed filters</b>: DEPENDS.  Only for the overview, without actually using the filters</li>
         </ul>
       '),
    );
    $result = db_query("SELECT name, vid FROM {views_view} ORDER BY name");
    while ($view = db_fetch_array($result)) {
      $vid= $view['vid'];
      $form['gears_views_existing']['gears_views_'. $view['name']] = array(
        '#type' => 'checkbox',
        '#title' => t('@s', array('@s' => $view['name'])),
        '#default_value' => variable_get('gears_views_'. $view['name'], FALSE),
      );
    }
  }
  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function gears_menu() {
  $items['admin/settings/gears/config'] = array(
    'title' => 'Gears',
    'description' => 'Allows users to export (copy then edit) an existing node.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gears_admin_settings'),
    'access arguments' => array('administer gears'),
  );
  $items['admin/settings/gears'] = array(
    'title' => 'Gears',
    'description' => 'Take the site off-line for maintenance or bring it back online.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gears_settings'),
    'access arguments' => array('access gears'),
    'file' => 'gears.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['manifest/node_create/%'] = array(
    'page callback' => '_gears_manifest_node_create',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access gears'),
  );
  $items['manifest/view_create/%'] = array(
    'page callback' => '_gears_manifest_view_create',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access gears'),
  );
  $items['manifest/delete/%'] = array(
    'page callback' => '_gears_manifest_delete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access gears'),
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function gears_perm() {
  return array(t('administer gears'), t('access gears'));
}

/**
 * Implementation of hook_init().
 */
function gears_init() {
  global $user;
  if (user_access('gears')) {
  }
}

// Theming functions

/**
 * Implementation of hook_theme().
 */
function gears_theme() {
  return array(
   'gears' => array('arguments' => array('link')),
  );
}

/**
 * Theme of the block to create and delete manifest
 */
function theme_gears($items = array()) {
  drupal_add_css(drupal_get_path('module', 'gears') .'/gears.css');
  $output = '<div class="gears-links">';
  $output .='<div id="gearsonline">Status</div>';
  $output .= "<ul gears_links>";
  foreach ($items as $item) {
    $element['#attributes']['class'] = 'gears_links';
    $data = $item;
    $output .= '<li'. drupal_attributes($element['#attributes']) .'>'. $data .'</li>';
  }
  $output .= '</ul>';
  $output .= '<div id=gearsinfo>.</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Implementation of hook_block().
 *
 * Build a block with two links: create offline and delete offline.
 * This block will only be shown in the views and nodes to indicate in its settings.
 * It will be necessary to activate it in admin / build / views.
 */
function gears_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Gears Link');
    return $blocks;
  }
  else if ($op == 'view') {
    switch ( $delta ) {
      case 0:
        $links = array();
        $block['subject'] = t('Gears link');
        if (user_access('access gears')) {
          // if is view
          $view_page = views_set_page_view(NULL); // actual view
          if ($view_page) {
            $view_name = ($view_page->view->name);
            if ( variable_get('gears_views_'. $view_name, FALSE)== 1) {
              $storename='view_'. $view_name;
              $path = str_replace("/", "**", $_GET['q']);
              $links[] = l(t('Create view offline'), 'manifest/view_create/'. $view_name .'/'. $path, array('attributes' => array('class' => 'gears_create')));
              $links[] = l(t('Delete view offline'), 'manifest/delete/'. $storename, array('attributes' => array('class' => 'gears_delete')));
//              $links[] = l(t('Create icon'), $url, array('attributes' => array('class' => 'gears_icon')));
              $block['content'] = theme('gears', $links);
              _gears_send_jquery($_GET['q'], $storename);
              return $block;
            }
          }

          else{
            $url =  $_GET['q'];
            $path = explode('/', $url);
            //if is node
            if ($path[0]=='node' and is_numeric($path[1])==1) { //if is node
              $node = node_load($path[1]);
              if ($node->path) {
                $url = $node->path;
              }
              $node_type= variable_get('gears_node_'. $node->type, FALSE);
              $storename = 'node_'. $path[1];
              if ($node_type == '1') {
                $links[] = l(t('Create offline'), 'manifest/node_create/'. $node->nid, array('attributes' => array('class' => 'gears_create')));
                $links[] = l(t('Delete offline'), 'manifest/delete/'. $storename, array('attributes' => array('class' => 'gears_delete')));
//                $links[] = l(t('Create icon'), $url, array('attributes' => array('class' => 'gears_icon')));
                $block['content'] = theme('gears', $links);
                _gears_send_jquery($url, $storename);
                return $block;
              }
            }
          }
        }
      break;
    }
  }
}

/**
 * This send datas to jquery files.
 * @param $url
 * url of view, node.
 * @param $storename
 */
function _gears_send_jquery($url, $storename) {
  drupal_add_js(drupal_get_path('module', 'gears') .'/jquery.gears.js', 'module');
  drupal_add_js(drupal_get_path('module', 'gears') .'/init.js', 'module');
  drupal_add_css(drupal_get_path('module', 'gears') .'/gears.css');
  $gears['url'] = $url;
  $gears['title'] = variable_get('gears_box_title', t('Drupal Gears'));
  $gears['path'] = drupal_get_path('module', 'gears');
  $gears['description'] = variable_get('gears_box_description', t('If you accept you can use Gears, and let you continue working offline'));
  $gears['storename'] = $storename;
  drupal_add_js(array('gears_var' => $gears), 'setting');
}




/**
 * This function creates the file manifest from a node,
 * @param $nid
 *  A unique id node.
 */
function _gears_manifest_node_create($nid) {
  if (user_access('access gears')) {
    $new_manifest = _gears_manifest_check($nid, 'node', NULL); //checks if there is a need for a new manifest
    $manifest_name= 'manifest_node_'. $nid;
    if ($new_manifest == 'TRUE') {
      $manifest .= _gears_manifest_add_header();  // add header
      $manifest .= _gears_manifest_add_js();  // add js files
      $manifest .= _gears_manifest_add_css();  // add css files
      $node = node_load($nid);
      if ($node->path) {
        $manifest .= "    { \"url\": \""."/". $node->path ."\" }\n" ;
      }
      if (module_exists('translation')) {
        global $language;
        $manifest .= "    { \"url\": \""."/". $language->prefix ."/node/". $nid ."\" }\n" ;
      }
      else {
        $manifest .= "    { \"url\": \""."/node/". $nid ."\" }\n" ;
      }
      $manifest .= _gears_manifest_add_footer(); // add footer
      $manifest_path= file_directory_path() .'/manifest';
      file_check_directory($manifest_path, FILE_CREATE_DIRECTORY) ; // checks if there is manifest folder, but creates

      file_delete($manifest_path .'/'. $manifest_name .'.json'); // delete the old manifest
      file_save_data($manifest, $manifest_path .'/'. $manifest_name .'.json'); // save the new manifest
    }
    $manifest_var['storename'] = variable_get('site_name', 'Drupal');
    $manifest_path = file_directory_path() .'/manifest';
    $manifest_filename = $manifest_name .'.json';
    print drupal_json(array(
      'path' => $manifest_path,
      'filename' => $manifest_filename
      )
    );
    exit();
  }
}

/**
 * This function creates the file manifest from a node,
 * @param $nid
 *  A unique id node.
 */
function _gears_manifest_view_create($view_name, $path) {
  if (user_access('access gears')) {
    $view= views_get_view($view_name);
    $manifest_name= 'manifest_view_'. $view_name;
    $manifest .= _gears_manifest_add_header();  // add header
    $manifest .= _gears_manifest_add_js();  // add js files
    $manifest .= _gears_manifest_add_css();  // add css files
    $view_query = _gears_view_query($view_name);  // sacar la consulta
    if (module_exists('translation')) {
      global $language;
      $view_query = str_replace("***CURRENT_LANGUAGE***", $language->language, $view_query);
      $manifest .= "    { \"url\": \""."/". $language->prefix ."/". $path ."\" },\n";
    }
    $query = db_query($view_query); // through query gets all the nodes of the view
    $new_manifest = _gears_manifest_check($view_name, 'view', $view_query); //checks if there is a need for a new manifest
    if ($new_manifest == 'TRUE') {
      while ($node = db_fetch_object($query)) {
        $nodo = node_load($node->nid);
        if (module_exists('translation')) {
          $manifest .= "    { \"url\": \""."/". $language->prefix ."/node/". $node->nid ."\" },\n" ;
        }
        else{
          if ($nodo->path) {
            $manifest .= "    { \"url\": \""."/". $nodo->path ."\" },\n" ;
          }
          else {
            $manifest .= "    { \"url\": \""."/node/". $node->nid ."\" },\n" ;
          }
        }
      }
      $path = str_replace("**", "/", $path);
      $manifest .= "    { \"url\": \""."/". $path ."\" }\n";
      $manifest .= _gears_manifest_add_footer(); // add footer
      $manifest_path= file_directory_path() .'/manifest';
      file_check_directory($manifest_path, FILE_CREATE_DIRECTORY) ; // checks if there is manifest folder, but creates
      file_delete($manifest_path .'/'. $manifest_name .'.json'); // delete the old manifest
      file_save_data($manifest, $manifest_path .'/'. $manifest_name .'.json'); // save the new manifest
    }
    $manifest_var['storename'] = variable_get('site_name', 'Drupal');
    $manifest_path = file_directory_path() .'/manifest';
    $manifest_filename = $manifest_name .'.json';
    print drupal_json(array(
        'path' => $manifest_path,
        'filename' => $manifest_filename
      )
    );
    exit();
  }
}

/**
 * This function checks if the manifest to create is already established and is updated
 * @param $type_data
 *   If is a view: $type_data is the name of view
 *   If is a node: $type_data is nid of node
 * @param $type
 *   Type of the page. The options are 'view' or 'node'
 * @param $query
 *   If type is view this is her Query
 * @return
 *   True: if is necesary to create a new manifest
 *   False: if the manifest is well established
 */
function _gears_manifest_check($type_data, $type, $query) {
  if ($type == 'node') {
    $query = db_fetch_object(db_query("SELECT changed FROM {node}  WHERE nid='%s'", $type_data));
    $changed = $query->changed;
    $manif = 'manifest_'. $type .'_'. $type_data;
  }
  elseif ($type == 'view') {
    $manif = 'manifest_view_'. $type_data;
    $node_count = db_query("$query");
    while ( $num = db_fetch_object($node_count)) {
      $nid_changed = db_fetch_object(db_query("SELECT changed FROM {node}  WHERE nid=%d", $num->nid));
      $changed = $changed+$nid_changed->changed;
    }
  }

  if ($type == 'node' or $type == 'view') {
    $hash= hash('ripemd160', $changed);
    $compr = db_fetch_object(db_query("SELECT * FROM {gears_manifest}  WHERE manifest='%s'", $manif));
    if ($compr->hash != $hash) {
      db_query("DELETE FROM {gears_manifest} WHERE manifest = '%s'", $manif );
    }
    if (($compr->hash != $hash) or (!$compr)) {
      db_query("INSERT INTO {gears_manifest} (manifest, hash) VALUES ('%s', '%s')", $manif , $hash);
      return 'TRUE';
    }
    return 'FALSE';
  }
}


function _gears_view_query($view_name) {
  $view= views_get_view($view_name);
  $query = db_prefix_tables($view->build_info['query']);
  $func_args = func_get_args();
  array_shift($func_args); // $js
  array_shift($func_args); // $view
  $display_id = (count($func_args)) ? array_shift($func_args) : 'default';

  $form_state = array(
    'display_id' => $display_id,
    'view_args' => $func_args ? implode('/', $func_args) : '',
    'rerender' => TRUE,
    'no_redirect' => TRUE,
    'view' => &$view,
  );

//  $output = drupal_build_form('views_ui_preview_form', $form_state);
  $args = array();
  if (isset($form_state['view_args']) && $form_state['view_args'] !== '') {
    $args = explode('/', $form_state['view_args']);
  }
    // Store the current view URL for later use:
    $view->set_display($form_state['display_id']);
    $view->set_arguments($args);
    // also override $_GET['q'] so we get the pager
    if ($form_state['view_args']) {
      $_GET['q'] .= '/'. $form_state['view_args'];
    }
    $preview = $view->preview($form_state['display_id'], $args);
    // Get information from the preview for display.
    if (!empty($view->build_info['query'])) {
      $rows = array();
      $query = db_prefix_tables($view->build_info['query']);
      if ($view->build_info['query_args']) {
        _db_query_callback($view->build_info['query_args'], TRUE);
        $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);
      }
    }
  return $query;
}


/**
 * Delete the file manifest
 * @param $storenmae
 */
function _gears_manifest_delete($storename) {
  $manifest_path = file_directory_path() .'/manifest'; //path of gear in the computer's user
  $manifest_filename = $storename; // filename tu remove
  print drupal_json(array(
    'path' => $manifest_path,
    'filename' => $manifest_filename
    )
  );
  exit();
}

/**
 * Add header in manifest file
 */
function _gears_manifest_add_header() {
  $manifest  = "{\n";
  $manifest .= "  \"betaManifestVersion\": 1,\n";
  $manifest .= "  \"version\": \"". time() ."\",\n";
  $manifest .= "  \"entries\": [\n";
  return $manifest;
}


/**
 * Add js files path in manifest
 */
function _gears_manifest_add_js() {

if ((!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update') && function_exists('locale_update_js_files')) {
    locale_update_js_files();
  }
  if (!isset($javascript)) {
    $javascript = drupal_add_js(NULL, NULL, 'header');
  }
  if (empty($javascript)) {
    return '';
  }
  $preprocessed = '';
  $no_preprocess = array('core' => '', 'module' => '', 'theme' => '');
  $files = array();
  $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  $directory = file_directory_path();
  $is_writable = is_dir($directory) && is_writable($directory) && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC);
  $query_string = '?'. drupal_substr(variable_get('css_js_query_string', '0'), 0, 1);
  foreach ($javascript as $type => $data) {
    if (!$data) continue;
    switch ($type) {
      case 'setting':
      break;
      case 'inline':
      break;
      default:
        foreach ($data as $path => $info) {
          if (!$info['preprocess'] || !$is_writable || !$preprocess_js) {
            $manifest .=   "    { \"url\": \"".   base_path() . $path ."\" },\n";
          }
        }
    }
  }
  if ($is_writable && $preprocess_js && count($files) > 0) {
    $manifest .=   "    { \"url\": \"".  base_path() . $preprocess_file  ."\" },\n";
  }
  $manifest .= "\n";
  return $manifest;
}

/**
 * Add css files path in manifest
 */
function _gears_manifest_add_css() {
  $css = drupal_add_css();
  $preprocess_css = (variable_get('preprocess_css', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  $directory = file_directory_path();
  $is_writable = is_dir($directory) && is_writable($directory) && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC);
  $query_string = '?'. drupal_substr(variable_get('css_js_query_string', '0'), 0, 1);
  foreach ($css as $media => $types) {
    foreach ($types as $type => $files) {
      if ($type == 'module') {
        $theme_styles = array();
        foreach (array_keys($css[$media]['theme']) as $theme_style) {
          $theme_styles[] = basename($theme_style);
        }
      }
      foreach ($types[$type] as $file => $preprocess) {
        if ($type == 'module' && in_array(str_replace('-rtl.css', '.css', basename($file)), $theme_styles)) {
          unset($types[$type][$file]);
          continue;
        }
        if (file_exists($file)) {
          if (!$preprocess || !($is_writable && $preprocess_css)) {
            if (!$preprocess && $type == 'module') {
              $manifest .=    "    { \"url\": \"". base_path() . $file . $query_string ."\" },\n";
            }
            else if (!$preprocess && $type == 'theme') {
              $manifest .=    "    { \"url\": \"". base_path() . $file . $query_string ."\" },\n";
            }
            else {
              $manifest .=    "    { \"url\": \"".  base_path() . $file . $query_string ."\" },\n";
            }
          }
        }
      }
    }
    if ($is_writable && $preprocess_css) {
      $filename = md5(serialize($types) . $query_string) .'.css';
      $preprocess_file = drupal_build_css_cache($types, $filename);
      $manifest .=   "    { \"url\": \"". base_path() . $preprocess_file ."\" },\n";
    }
  }
  $manifest .="    { \"url\": \"". base_path() . drupal_get_path('module', 'gears') ."/gears.css". $query_string ."\" }, \n";
  $manifest .="    { \"url\": \"". base_path() . path_to_theme() ."/style.css". $query_string ."\" },\n";
  global $theme;
  $them = variable_get("theme_". $theme ."_settings", NULL);
  $logo_path = $them['logo_path'];
  if ($logo_path) {
    $manifest .=  "    { \"url\": \"/". $logo_path ."\" },\n" ;
  }
  $manifest .= "\n";
  return $manifest;

}


/**
 *  Add footer in manifest file
 */
function _gears_manifest_add_footer() {
  $manifest .= "  ]\n";
  $manifest .= "}";
  return $manifest;
}
